
laba_4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000146  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  000001ba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000683  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005c3  00000000  00000000  000008e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000286  00000000  00000000  00000ea6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  0000112c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000309  00000000  00000000  000011c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000cb  00000000  00000000  000014d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  0000159c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__vector_8>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 5b 00 	call	0xb6	; 0xb6 <main>
  74:	0c 94 a1 00 	jmp	0x142	; 0x142 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <setup>:
uint8_t port_stat = 0;
uint8_t port_stat_l = 0;
uint8_t sys;

void setup(){
	DDRA |= (1 << 0);
  7c:	d0 9a       	sbi	0x1a, 0	; 26
	DDRB |= (1 << 0);
  7e:	b8 9a       	sbi	0x17, 0	; 23
	
	UBRRL = 0x33;
  80:	83 e3       	ldi	r24, 0x33	; 51
  82:	89 b9       	out	0x09, r24	; 9
	UBRRH = 0x00;
  84:	10 bc       	out	0x20, r1	; 32
	
	UCSRB = (0 << RXCIE) | (0 << TXCIE) | (0 << UDRIE) | (0 << RXEN) | (1 << TXEN);
  86:	88 e0       	ldi	r24, 0x08	; 8
  88:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1);
  8a:	86 e8       	ldi	r24, 0x86	; 134
  8c:	80 bd       	out	0x20, r24	; 32
	
	DDRA = 0;
  8e:	1a ba       	out	0x1a, r1	; 26
	
	TCCR1B = (1 << CS11) | (1 << CS10);
  90:	83 e0       	ldi	r24, 0x03	; 3
  92:	8e bd       	out	0x2e, r24	; 46
	TIMSK = (1 << TOIE1);
  94:	84 e0       	ldi	r24, 0x04	; 4
  96:	89 bf       	out	0x39, r24	; 57
	TIFR = (1 << TOIE1);
  98:	88 bf       	out	0x38, r24	; 56
	
	TCNT1H = 207;
  9a:	8f ec       	ldi	r24, 0xCF	; 207
  9c:	8d bd       	out	0x2d, r24	; 45
	TCNT1L = 43;
  9e:	8b e2       	ldi	r24, 0x2B	; 43
  a0:	8c bd       	out	0x2c, r24	; 44
	
	DDRB = (1 << 0);
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	87 bb       	out	0x17, r24	; 23
	
	sei();
  a6:	78 94       	sei
  a8:	08 95       	ret

000000aa <uart_send>:
}

void uart_send(char c){
	while(!( UCSRA & (1<<UDRE)));
  aa:	5d 9b       	sbis	0x0b, 5	; 11
  ac:	fe cf       	rjmp	.-4      	; 0xaa <uart_send>
	UDR = c;
  ae:	8c b9       	out	0x0c, r24	; 12
	
	count_r = 0;
  b0:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <count_r>
  b4:	08 95       	ret

000000b6 <main>:
}

int main(){
	setup();
  b6:	0e 94 3e 00 	call	0x7c	; 0x7c <setup>
  ba:	ff cf       	rjmp	.-2      	; 0xba <main+0x4>

000000bc <__vector_8>:
	while(1){
	}
}

ISR(TIMER1_OVF_vect)
{
  bc:	1f 92       	push	r1
  be:	0f 92       	push	r0
  c0:	0f b6       	in	r0, 0x3f	; 63
  c2:	0f 92       	push	r0
  c4:	11 24       	eor	r1, r1
  c6:	2f 93       	push	r18
  c8:	3f 93       	push	r19
  ca:	4f 93       	push	r20
  cc:	5f 93       	push	r21
  ce:	6f 93       	push	r22
  d0:	7f 93       	push	r23
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25
  d6:	af 93       	push	r26
  d8:	bf 93       	push	r27
  da:	ef 93       	push	r30
  dc:	ff 93       	push	r31
	cli();
  de:	f8 94       	cli
	
	port_stat = PINA;
  e0:	89 b3       	in	r24, 0x19	; 25
  e2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <port_stat>
	if (port_stat != port_stat_l)
  e6:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ea:	89 17       	cp	r24, r25
  ec:	29 f0       	breq	.+10     	; 0xf8 <__vector_8+0x3c>
		count++;
  ee:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <count>
  f2:	9f 5f       	subi	r25, 0xFF	; 255
  f4:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <count>
	port_stat_l = port_stat;
  f8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	
	if (count_r == 30)
  fc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <count_r>
 100:	8e 31       	cpi	r24, 0x1E	; 30
 102:	29 f4       	brne	.+10     	; 0x10e <__vector_8+0x52>
		uart_send(count/2);
 104:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <count>
 108:	86 95       	lsr	r24
 10a:	0e 94 55 00 	call	0xaa	; 0xaa <uart_send>
	count_r++;
 10e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <count_r>
 112:	8f 5f       	subi	r24, 0xFF	; 255
 114:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <count_r>
	
	TCNT1H = 207;
 118:	8f ec       	ldi	r24, 0xCF	; 207
 11a:	8d bd       	out	0x2d, r24	; 45
	TCNT1L = 43;
 11c:	8b e2       	ldi	r24, 0x2B	; 43
 11e:	8c bd       	out	0x2c, r24	; 44
 120:	ff 91       	pop	r31
 122:	ef 91       	pop	r30
 124:	bf 91       	pop	r27
 126:	af 91       	pop	r26
 128:	9f 91       	pop	r25
 12a:	8f 91       	pop	r24
 12c:	7f 91       	pop	r23
 12e:	6f 91       	pop	r22
 130:	5f 91       	pop	r21
 132:	4f 91       	pop	r20
 134:	3f 91       	pop	r19
 136:	2f 91       	pop	r18
 138:	0f 90       	pop	r0
 13a:	0f be       	out	0x3f, r0	; 63
 13c:	0f 90       	pop	r0
 13e:	1f 90       	pop	r1
 140:	18 95       	reti

00000142 <_exit>:
 142:	f8 94       	cli

00000144 <__stop_program>:
 144:	ff cf       	rjmp	.-2      	; 0x144 <__stop_program>
