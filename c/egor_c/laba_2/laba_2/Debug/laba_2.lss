
laba_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000098  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  000000ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000090  00000000  00000000  000007b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  00000848  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000025  00000000  00000000  00000868  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000096  00000000  00000000  0000088d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000061  00000000  00000000  00000923  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000014e  00000000  00000000  00000984  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000030  00000000  00000000  00000ad4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000008b  00000000  00000000  00000b04  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 0000001e  00000000  00000000  00000b8f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 43 00 	call	0x86	; 0x86 <main>
  64:	0c 94 4a 00 	jmp	0x94	; 0x94 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <setup>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>

void setup(){
	DDRC |= (0 << 0) | (0 << 1);
  6c:	84 b3       	in	r24, 0x14	; 20
  6e:	84 bb       	out	0x14, r24	; 20
	DDRD |= (0 << 2) | (0 << 3);
  70:	81 b3       	in	r24, 0x11	; 17
  72:	81 bb       	out	0x11, r24	; 17

	PORTC |= (1 << 0) | (1 << 1);
  74:	85 b3       	in	r24, 0x15	; 21
  76:	83 60       	ori	r24, 0x03	; 3
  78:	85 bb       	out	0x15, r24	; 21
	PORTD |= (1 << 2) | (1 << 3);
  7a:	82 b3       	in	r24, 0x12	; 18
  7c:	8c 60       	ori	r24, 0x0C	; 12
  7e:	82 bb       	out	0x12, r24	; 18
	
	DDRA = 0xFF;
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	8a bb       	out	0x1a, r24	; 26
}
  84:	08 95       	ret

00000086 <main>:

int main(void)
{
	setup();
  86:	0e 94 36 00 	call	0x6c	; 0x6c <setup>
	...
	asm ("nop");
	asm ("nop");
	asm ("nop");
	asm ("nop");
  92:	ff cf       	rjmp	.-2      	; 0x92 <main+0xc>

00000094 <_exit>:
  94:	f8 94       	cli

00000096 <__stop_program>:
  96:	ff cf       	rjmp	.-2      	; 0x96 <__stop_program>
