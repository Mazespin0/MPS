
laba_4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000128  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000090  00000000  00000000  000007f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  00000884  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000025  00000000  00000000  000008a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001cd  00000000  00000000  000008c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000138  00000000  00000000  00000a96  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000026a  00000000  00000000  00000bce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000030  00000000  00000000  00000e38  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000f7  00000000  00000000  00000e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000c6  00000000  00000000  00000f5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 00000038  00000000  00000000  00001025  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 45 00 	call	0x8a	; 0x8a <main>
  64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <setup>:
#define  F_CPU  8000000UL
#include "avr/io.h"
#include <util/delay.h>
 
void setup(){
	DDRD  |= (1 << PD7);
  6c:	8f 9a       	sbi	0x11, 7	; 17
	DDRB  |= (1 << PB3);
  6e:	bb 9a       	sbi	0x17, 3	; 23
	
	TCCR2 |= (1 << WGM20) | (1 << WGM21);
  70:	85 b5       	in	r24, 0x25	; 37
  72:	88 64       	ori	r24, 0x48	; 72
  74:	85 bd       	out	0x25, r24	; 37
	TCCR2 |= (1 << COM21) | (1 << CS20)|(1 << CS21) | (0 << CS22);
  76:	85 b5       	in	r24, 0x25	; 37
  78:	83 62       	ori	r24, 0x23	; 35
  7a:	85 bd       	out	0x25, r24	; 37
	
	TCCR0 |= (1 << WGM00) | (1 << WGM01);
  7c:	83 b7       	in	r24, 0x33	; 51
  7e:	88 64       	ori	r24, 0x48	; 72
  80:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1 << COM01) | (1 << CS00)|(1 << CS01) | (0 << CS02);
  82:	83 b7       	in	r24, 0x33	; 51
  84:	83 62       	ori	r24, 0x23	; 35
  86:	83 bf       	out	0x33, r24	; 51
}
  88:	08 95       	ret

0000008a <main>:
      
int main ()
{
	setup();
  8a:	0e 94 36 00 	call	0x6c	; 0x6c <setup>
    while (1){
		uint8_t duty=0; 
		uint8_t _duty=255;
  8e:	9f ef       	ldi	r25, 0xFF	; 255
      
int main ()
{
	setup();
    while (1){
		uint8_t duty=0; 
  90:	80 e0       	ldi	r24, 0x00	; 0
		uint8_t _duty=255;
  92:	2f ef       	ldi	r18, 0xFF	; 255
  94:	0c c0       	rjmp	.+24     	; 0xae <main+0x24>
		
		for(duty, _duty; duty<255, _duty>0; duty++, _duty--){
			OCR0=duty;
  96:	8c bf       	out	0x3c, r24	; 60
			OCR2=_duty;
  98:	93 bd       	out	0x23, r25	; 35
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	ef e0       	ldi	r30, 0x0F	; 15
  9c:	f7 e2       	ldi	r31, 0x27	; 39
  9e:	31 97       	sbiw	r30, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <main+0x14>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <main+0x1a>
  a4:	00 00       	nop
	setup();
    while (1){
		uint8_t duty=0; 
		uint8_t _duty=255;
		
		for(duty, _duty; duty<255, _duty>0; duty++, _duty--){
  a6:	8f 5f       	subi	r24, 0xFF	; 255
  a8:	91 50       	subi	r25, 0x01	; 1
  aa:	01 c0       	rjmp	.+2      	; 0xae <main+0x24>
int main ()
{
	setup();
    while (1){
		uint8_t duty=0; 
		uint8_t _duty=255;
  ac:	92 2f       	mov	r25, r18
		
		for(duty, _duty; duty<255, _duty>0; duty++, _duty--){
  ae:	99 23       	and	r25, r25
  b0:	91 f7       	brne	.-28     	; 0x96 <main+0xc>
			OCR0=duty;
			OCR2=_duty;
			_delay_ms(5);
			}
			
		for(duty, _duty; _duty<255, duty>0; _duty++, duty--){
  b2:	88 23       	and	r24, r24
  b4:	d9 f3       	breq	.-10     	; 0xac <main+0x22>
			OCR0=duty;
  b6:	8c bf       	out	0x3c, r24	; 60
			OCR2=_duty;
  b8:	93 bd       	out	0x23, r25	; 35
  ba:	ef e0       	ldi	r30, 0x0F	; 15
  bc:	f7 e2       	ldi	r31, 0x27	; 39
  be:	31 97       	sbiw	r30, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <main+0x34>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <main+0x3a>
  c4:	00 00       	nop
			OCR0=duty;
			OCR2=_duty;
			_delay_ms(5);
			}
			
		for(duty, _duty; _duty<255, duty>0; _duty++, duty--){
  c6:	9f 5f       	subi	r25, 0xFF	; 255
  c8:	81 50       	subi	r24, 0x01	; 1
  ca:	a9 f7       	brne	.-22     	; 0xb6 <main+0x2c>
int main ()
{
	setup();
    while (1){
		uint8_t duty=0; 
		uint8_t _duty=255;
  cc:	92 2f       	mov	r25, r18
  ce:	ef cf       	rjmp	.-34     	; 0xae <main+0x24>

000000d0 <_exit>:
  d0:	f8 94       	cli

000000d2 <__stop_program>:
  d2:	ff cf       	rjmp	.-2      	; 0xd2 <__stop_program>
